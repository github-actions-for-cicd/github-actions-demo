name: A workflow for my Hello World file
on:
 push:
 pull_request:
  branches: [main]
jobs:
  install-runner-default:
    runs-on: ubuntu-20.04
    name: Install runner on openshift cluster
    steps:
      - name: Authenticate
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: ${{ secrets.OPENSHIFT_USER }}
          OPENSHIFT_NAMESPACE: default
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: default
      - name: Install self hosted runner into this repository
        uses: redhat-actions/openshift-actions-runner-installer@v1
        with:
          github_pat: ${{ secrets.PAT }}
      - name: Install CLI tools from OpenShift Mirror
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "mirror"
          oc: "3"
          helm: "latest"
          
  run-kube-linter :
    name: Running Kube-Linter on a set of .yaml files
    needs: install-runner-default
    runs-on: [self-hosted]
    steps:      
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: actions/checkout@v2
        with:
          # Checkout all repo history to make tags available for figuring out kube-linter version during build.
          fetch-depth: 0

      - name: Read Go version from go.mod
        run: echo "GO_VERSION=$(grep -E "^go\s+[0-9.]+$" go.mod | cut -d " " -f 2)" >> $GITHUB_ENV
      - name: Setup Go environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build binaries
        run: make build

      - name: Print kube-linter version
        run: .gobin/kube-linter version

      - name: Run kube-linter on a sample file with SARIF output
        run: .gobin/kube-linter lint --format=sarif e2etests/testdata/inputs/splunk.yaml > results.sarif
        continue-on-error: true

      - name: Dump output file and check it is not empty
        # The if part will generate no-zero exit code if the file is empty. See https://github.com/stedolan/jq/issues/1142#issuecomment-432003984
        run: jq -es 'if . == [] then null else .[] | . end' results.sarif

      - name: Upload output file as GitHub artifact for manual investigation
        uses: actions/upload-artifact@v2
        with:
          name: results.sarif
          path: results.sarif

      - name: Check if output file is valid according to SARIF schema
        run: |
          set -ex
          GO111MODULE=on go get github.com/neilpa/yajsv@v1.4.0
          schema=$(jq -r '.["$schema"]' results.sarif)
          [ -n "$schema" ] && wget -nv $schema
          yajsv -s $(basename $schema) results.sarif
      - name: Upload SARIF output file to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
         
  print-log :
    name: Print the linter log file
    needs: run-kube-linter
    runs-on: [self-hosted]     
    steps:   
      - shell: bash
        run: |
             cat results.sarif

#  run-python-script :
#   name: Check the number of errors found by Kube-linter
#   needs: save-log-if-kubelinter-fails
#   runs-on: [self-hosted]
#   if: always() && (needs.save-log-if-kubelinter-fails.result == 'success')
#   steps:
#      - name: Download log file
#        uses: actions/download-artifact@v2
#        with:
#          name: 'Kube-linter log'
#      - name: Checkout repo
#        uses: actions/checkout@v1
#      - name: Run custom action to install python
#        uses: ./action-a
